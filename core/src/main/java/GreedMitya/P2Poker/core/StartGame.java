package GreedMitya.P2Poker.core;

import GreedMitya.P2Poker.PacketsClasses.Logger;
import GreedMitya.P2Poker.PacketsClasses.PlayerBalanceUpdate;
import GreedMitya.P2Poker.Server.PokerServer;
import com.esotericsoftware.kryonet.Server;

import java.util.ArrayList;

public class StartGame {
    private PokerServer pokerServer;
    private Server server;
    private ArrayList<Player> players; // —Ç–µ–ø–µ—Ä—å –ø–æ–ª–µ, –∞ –Ω–µ –≤–Ω—É—Ç—Ä–∏ main
    private PokerGame game;

    public StartGame() {
        players = new ArrayList<>();
    }

    public void setServer(PokerServer pokerServer){
        this.pokerServer = pokerServer;
        this.server = pokerServer.getServer();
    }
    public void removePlayer(int connectionID) {
        Player toRemove = null;

        for (Player p : players) {
            if (p.getConnectionId() == connectionID) {
                toRemove = p;
                break;
            }
        }

        if (toRemove != null) {
            players.remove(toRemove);
            Logger.Game("–£–¥–∞–ª—ë–Ω –∏–≥—Ä–æ–∫: " + toRemove.getName());
        } else {
            Logger.Game("‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫ —Å connectionId=" + connectionID);
        }

        if (game != null && game.playerManager != null) {
            game.playerManager.reloadActivePlayersList();
        }
    }



    public void addPlayer(String nickname, int connectionID) {
        synchronized (this) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            for (Player p : players) {
                if (p.getConnectionId() == connectionID) {
                    Logger.Game("–ò–≥—Ä–æ–∫ —Å connectionID " + connectionID + " —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.");
                    return;
                }
                if (p.getName().equals(nickname)) {
                    Logger.Game("–ò–≥—Ä–æ–∫ —Å –Ω–∏–∫–æ–º " + nickname + " —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.");
                    return;
                }
            }
            // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
            Player newPlayer = new Player(nickname);
            newPlayer.setServer(server);
            newPlayer.setConnectionId(connectionID);

            players.add(newPlayer);

            Logger.Game("–î–æ–±–∞–≤–ª–µ–Ω –∏–≥—Ä–æ–∫: " + nickname + (pokerServer.gameAlreadyStarted ? " (–æ–∂–∏–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞–∑–¥–∞—á–∏)" : ""));

            PlayerBalanceUpdate upd = new PlayerBalanceUpdate();
            upd.name = newPlayer.getName();
            upd.newBalance = newPlayer.getBalance();
            server.sendToAllTCP(upd);
        }
    }



    public void startGame() {
        if (players.size() >= 2) {
            pokerServer.gameAlreadyStarted = true;
            game = new PokerGame(players);// ‚úÖ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º –∏–≥—Ä—É
            game.setStartGame(this);
            game.setPokerServer(pokerServer);
            game.setServer(server);
            game.bettingManager.setPokerServer(pokerServer);
            game.playerManager.setPokerServer(pokerServer);// ‚úÖ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –µ—ë –ø–æ–ª—è–º
            game.playerManager.setServer(server);// ‚úÖ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –µ—ë –ø–æ–ª—è–º
            game.table.setServer(server);
            game.startGame(); // üöÄ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        } else {
            Logger.Game("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞");
        }
    }


    public ArrayList<Player> getPlayers() {
        return players;
    }

    public int getConnectionIdByPlayerId(Player playerId) {
        return playerId.getConnectionId();
    }
    public PokerGame getGame(){
        return game;
    }

    // main –Ω–µ –Ω—É–∂–µ–Ω ‚Äî –∑–∞–ø—É—Å–∫ –±—É–¥–µ—Ç —Å UI –∏–ª–∏ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
}

