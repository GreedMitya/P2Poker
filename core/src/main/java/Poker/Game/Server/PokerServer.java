package Poker.Game.Server;

import Poker.Game.PacketsClasses.*;
import Poker.Game.core.Player;
import Poker.Game.core.StartGame;
import com.esotericsoftware.kryonet.Connection;
import com.esotericsoftware.kryonet.Listener;
import com.esotericsoftware.kryonet.Server;
import java.io.IOException;
import java.net.*;
import java.util.Enumeration;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.*;

public class PokerServer {
    private static PokerServer instance;
    public volatile boolean gameAlreadyStarted = false;
    protected final Map<String, Integer> waitingPlayers = new ConcurrentHashMap<>();

    private final Set<Integer> activeConnections = ConcurrentHashMap.newKeySet();

    public final Map<Integer, Boolean> playerReadyStatus = new ConcurrentHashMap<>();

    private Server server;
    private StartGame startGame;
    private volatile boolean isShuttingDown = false;
    // –•—Ä–∞–Ω–∏–º nickname –ø–æ connectionId
    public final Map<String, Integer> playerNicknames = new ConcurrentHashMap<>();
    // pendingActions: –∫–ª—é—á ‚Äî connectionId –∏–≥—Ä–æ–∫–∞, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –±—É–¥—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    private final Map<Integer, CompletableFuture<PlayerAction>> pendingActions = new ConcurrentHashMap<>();

    // –≤–º–µ—Å—Ç–æ Executors.newScheduledThreadPool(4);
    private final ScheduledExecutorService scheduler =
        Executors.newScheduledThreadPool(4, r -> {
            Thread t = new Thread(r);
            t.setDaemon(true);  // –¥–µ–º–æ–Ω ‚Äî –Ω–µ –±—É–¥–µ—Ç –º–µ—à–∞—Ç—å JVM –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
            return t;
        });

    public PokerServer() {
        instance = this;
    }

    public void start() throws IOException {
        server = new Server();
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –ø–∞–∫–µ—Ç—ã (ActionRequest, ActionResponse, Action, Action[].class –∏ —Ç.–¥.)
        Network.register(server.getKryo());

        // –ó–∞–ø—É—Å–∫–∞–µ–º ¬´—Å–ª—É—à–∞–ª–∫—É¬ª –¥–ª—è –ª—é–±—ã—Ö UDP Broadcast, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        BroadcastResponder.startListening();

        // Listener –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: Join, GameStart –∏ –Ω–∞—à–∏ ActionResponse
        server.addListener(new Listener() {
            @Override
            public void connected(Connection conn) {
                //Logger.server("connID=" + conn.getID() + " connected from " + conn.getRemoteAddressTCP());
                activeConnections.add(conn.getID());
            }


            @Override
            public void disconnected(Connection conn) {
                int id = conn.getID();
                //Logger.server("connID=" + id + " disconnected.");
                activeConnections.remove(id);
                playerReadyStatus.remove(id);
                pendingActions.remove(id);

                // –£–¥–∞–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é (—á–µ—Ä–µ–∑ –∏—Ç–µ—Ä–∞—Ü–∏—é)
                playerNicknames.entrySet().removeIf(entry -> entry.getValue().equals(id));
                startGame.removePlayer(id);
                server.sendToAllTCP(new PlayerListUpdate(playerNicknames));

                // ‚õî –ï—Å–ª–∏ —Ö–æ—Å—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
                if (id == 1) {
                    Logger.server("‚õî –•–æ—Å—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è! –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω...");
                    sendChatMessage("‚õî –•–æ—Å—Ç –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É. –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...");
                    shutdownServer();// 2 —Å–µ–∫ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
                }
            }






            @Override
            public void received(Connection conn, Object obj) {
                //Logger.server("‚ßó Received packet of type: " + obj.getClass().getName());


                if (obj instanceof JoinRequest) {
                    JoinRequest req = (JoinRequest) obj;
                    int connId = conn.getID();
                    handleJoin(req, connId);
                    if(connId==1){
                        sendChatMessage("Server ip: " + getLocalIpAddress());
                        sendChatMessage("Ports: 54555/54777");
                    }
                } else if (obj instanceof ActionResponse) {
                    ActionResponse resp = (ActionResponse) obj;
                    //Logger.server("üì• [RESP] –æ—Ç playerId=" + resp.playerId +
                    //    " action=" + resp.chosenAction.name + ", amount=" + resp.amount);

                    CompletableFuture<PlayerAction> future = pendingActions.remove(resp.playerId);
                    if (future != null) {
                        PlayerAction action = new PlayerAction(resp.chosenAction.name, resp.amount);
                        future.complete(action);
                    } else {
                        Logger.server("‚Äº –ù–µ—Ç pendingActions –¥–ª—è " + resp.playerId);
                    }
                } else if (obj instanceof GameStartRequest) {
                    if (conn.getID() == 1 && startGame.getPlayers().size() >= 2) {
                        server.sendToAllTCP(new GameStartedNotification());
                        Logger.server("Game started by host");
                        Thread game = new Thread(() -> {
                            try {
                                startGame.startGame();
                                // –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
                            } catch (Exception e) {
                                Logger.server("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã: " + e.getMessage());
                                e.printStackTrace(); // –∏–ª–∏ Logger.server(e)
                                server.stop(); // –æ—Å—Ç–∞–Ω–æ–≤–∏–º —Å–µ—Ä–≤–µ—Ä
                            }

                        });game.setDaemon(true);game.start();
                    } else {
                        Logger.server("–ù–µ–ª—å–∑—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É: –Ω–µ —Ö–æ—Å—Ç –∏–ª–∏ –º–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤");
                    }
                } else if (obj instanceof ChatMessage) {
                    ChatMessage mess = (ChatMessage) obj;
                    server.sendToAllTCP(mess);
                }else if (obj instanceof ClientReadyForNextRound) {
                    //Logger.server("üì• [RESP] Client ready packet from playerId=" + ((ClientReadyForNextRound) obj).getPlayerId());
                    handleClientReadyForNextRound((ClientReadyForNextRound) obj);
                } else if (obj instanceof RestartGameRequest) {
                    RestartGameRequest req = (RestartGameRequest) obj;
                    if (req.senderId == 1) { // –¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç
                        Logger.server("‚Üª –ü–æ–ª—É—á–µ–Ω Restart –æ—Ç —Ö–æ—Å—Ç–∞!");

                        // 1. –û–±–Ω—É–ª–∏–º –≤—Å—ë
                        playerNicknames.clear();
                        pendingActions.clear();

                        // 2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º –ª–æ–≥–∏–∫—É StartGame
                        startGame = new StartGame();
                        startGame.setServer(PokerServer.this);

                        // 3. –í—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º: —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à—ë–ª —Ä–µ—Å—Ç–∞—Ä—Ç
                        server.sendToAllTCP(new ChatMessage("‚ôª –ò–≥—Ä–∞ –±—ã–ª–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ —Ö–æ—Å—Ç–æ–º", "sys"));
                        server.sendToAllTCP(new PlayerListUpdate(playerNicknames));
                        server.sendToAllTCP(new RestartGameNotification());
                    }
                }

            }
        });

        bindWithRetry(54555, 54777);// –≤—ã–±–∏—Ä–∞–π—Ç–µ –≤–∞—à–∏ –ø–æ—Ä—Ç—ã
        server.start();


        // KeepAlive-–ø–∏–Ω–≥ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
        scheduler.scheduleWithFixedDelay(() -> {
            for (Connection conn : server.getConnections()) {
                conn.sendTCP(new KeepAlive());
            }
            //Logger.server("KeepAlive –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º");
        }, 5, 5, TimeUnit.SECONDS);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–≥—Ä—ã
        startGame = new StartGame();
        startGame.setServer(this);

        Logger.server("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...");
    }
    private void bindWithRetry(int tcpPort, int udpPort) throws IOException {
        int attempts = 0;
        final int maxAttempts = 5;
        final long delayMs = 200;

        while (true) {
            try {
                server.bind(tcpPort, udpPort);
                return; // —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∏–Ω–¥–∏–ª–∏—Å—å ‚Äî –≤—ã—Ö–æ–¥–∏–º
            } catch (BindException e) {
                attempts++;
                if (attempts >= maxAttempts) {
                    // –Ω–µ —Å–º–æ–≥–ª–∏ –∑–∞ maxAttempts ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
                    throw new IOException(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∏–Ω–¥–∏—Ç—å –ø–æ—Ä—Ç—ã " + tcpPort + "/" + udpPort +
                            " –ø–æ—Å–ª–µ " + attempts + " –ø–æ–ø—ã—Ç–æ–∫", e);
                }
                Logger.server("–ü–æ—Ä—Ç –∑–∞–Ω—è—Ç, retry " + attempts + "/" + maxAttempts +
                    " —á–µ—Ä–µ–∑ " + delayMs + "ms...");
                try {
                    Thread.sleep(delayMs);
                } catch (InterruptedException ie) {
                    Thread.currentThread().interrupt();
                    throw new IOException("–û–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –±–∏–Ω–¥–∞ –ø—Ä–µ—Ä–≤–∞–Ω–æ", ie);
                }
            }
        }
    }

    public static PokerServer getInstance() {
        return instance;
    }
    private boolean isNicknameTaken(String nickname) {
        return playerNicknames.containsKey(nickname) || waitingPlayers.containsKey(nickname);
    }
    public static String getLocalIpAddress() {
        try {
            for (Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {
                NetworkInterface intf = en.nextElement();

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º loopback –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
                if (intf.isLoopback() || !intf.isUp()) continue;

                for (Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) {
                    InetAddress inetAddress = enumIpAddr.nextElement();

                    if (!inetAddress.isLoopbackAddress() && inetAddress instanceof Inet4Address) {
                        String ip = inetAddress.getHostAddress();
                        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö/–º–æ–±–∏–ª—å–Ω—ã—Ö
                        if (!ip.startsWith("127.") && !ip.startsWith("0.")) {
                            return ip;
                        }
                    }
                }
            }
        } catch (SocketException ex) {
            ex.printStackTrace();
        }
        return "Unknown";
    }


    private void handleJoin(JoinRequest req, int id) {
        synchronized(this) {
            if (isNicknameTaken(req.nickname)) {
                sendChatMessage("–ù–∏–∫ " + req.nickname + " —É–∂–µ –∑–∞–Ω—è—Ç!");
                return;
            }
            playerNicknames.put(req.nickname, id);
            playerReadyStatus.put(id, true);

            if (gameAlreadyStarted) {
                waitingPlayers.put(req.nickname, id);
                sendChatMessage(req.nickname + " connected! Will play from next round!");
            } else {
                Player player = new Player(req.nickname);
                startGame.addPlayer(player.getName(), id);
                server.sendToAllTCP(new PlayerJoinedNotification(req.nickname, id));
                server.sendToAllTCP(new PlayerListUpdate(playerNicknames));
            }
        }
    }


    /**
     * –ó–∞–ø—Ä–æ—Å —Ö–æ–¥–∞ —É –∫–ª–∏–µ–Ω—Ç–∞.
     * @param connectionId ID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (Connection.getID())
     * @param availableActions –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Action
     * @param timeoutSec —Ç–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     * @return Future, –∫–æ—Ç–æ—Ä–æ–µ –≤–µ—Ä–Ω—ë—Ç name –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
     */
    public CompletableFuture<PlayerAction> requestPlayerAction(int connectionId,
                                                               Action[] availableActions,
                                                               int timeoutSec,
                                                               double playerCurrentBet,
                                                               double currentBet) {
        CompletableFuture<PlayerAction> future = new CompletableFuture<>();
        pendingActions.put(connectionId, future);

        ActionRequest req = new ActionRequest();
        req.playerId = connectionId;
        req.availableActions = availableActions;
        req.timeoutSec = timeoutSec;
        server.sendToTCP(connectionId, req);

        //Logger.server("‚ñ∫ ActionRequest sent to playerId=" + connectionId +
        //    ", actions=" + Arrays.toString(availableActions) +
        //    ", timeout=" + timeoutSec);

        // –¢–∞–π–º–∞—É—Ç ‚Üí auto-check –∏–ª–∏ auto-fold
        scheduler.schedule(() -> {
            if (!future.isDone()) {
                Logger.server("Timeout: auto-decision for " + connectionId);
                String action = (playerCurrentBet == currentBet) ? "check" : "fold";
                future.complete(new PlayerAction(action, 0));
                pendingActions.remove(connectionId);
            }
        }, timeoutSec, TimeUnit.SECONDS);

        return future;
    }

    public Map<String, Integer> getWaitingPlayers() {
        return waitingPlayers;
    }

    public void sendChatMessage(String text) {
        String name = "sys";
        server.sendToAllTCP(new ChatMessage(text, name));
    }

    public Server getServer() {
        return server;
    }

    public void setServer(Server server) {
        this.server = server;
    }
    private void handleClientReadyForNextRound(ClientReadyForNextRound packet) {
        int playerId = packet.getPlayerId();
        boolean isReady = packet.isReady();
        playerReadyStatus.put(playerId, isReady);

        if (areAllPlayersReady()) {
            //Logger.server("–í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å ‚Äì —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥–∞ —Å—Ç–∞—Ä—Ç—É–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥");
            // –°—Ä–∞–∑—É –æ–±–Ω—É–ª—è–µ–º, —á—Ç–æ–±—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞ –µ—â—ë –æ–¥–∏–Ω —Ä–∞—É–Ω–¥
            for (Integer id : playerReadyStatus.keySet()) {
                playerReadyStatus.put(id, false);
            }
            // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç
            scheduler.schedule(() -> {
                //Logger.server("‚è± 1 —Å–µ–∫—É–Ω–¥–∞ –∏—Å—Ç–µ–∫–ª–∞ ‚Äì –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥");
                startNextRound();
            }, 2, TimeUnit.SECONDS);
        }
    }


    private boolean areAllPlayersReady() {
        for (Boolean isReady : playerReadyStatus.values()) {
            if (!isReady) {
                return false;
            }
        }
        return true;
    }
    private void startNextRound() {
        // –ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞:
        for (Map.Entry<String, Integer> entry : waitingPlayers.entrySet()) {
            String nickname = entry.getKey();
            int connectionID = entry.getValue();
            // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ—Ç –ª–∏ —Ç–∞–∫–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ active players
            boolean alreadyExists = false;
            for (Player p : startGame.getPlayers()) {
                if (p.getName().equals(nickname)) {
                    alreadyExists = true;
                    break;
                }
            }
            if (!alreadyExists) {
                startGame.addPlayer(nickname, connectionID);
                startGame.getGame().playerManager.reloadActivePlayersList();
            }
        }
        waitingPlayers.clear();
        server.sendToAllTCP(new PlayerListUpdate(playerNicknames));
        // üîÑ –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö
        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —É–∂–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        //System.out.println("–í—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥!");
        startGame.getGame().resetBets();
        startGame.getGame().endRound();
        startGame.getGame().startNextRound();
    }


    public void sendWinnerAndShutdown(String winnerName) {
        if (isShuttingDown) return;
        isShuttingDown = true;

        // 1) –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —Ä–∞—Å—Å—ã–ª–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
        WinnerPacket win = new WinnerPacket();
        win.setName(winnerName);
        server.sendToAllTCP(win);

        // 2) –ß–µ—Ä–µ–∑ 5 —Å–µ–∫ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö –≤ –ª–æ–±–±–∏
        scheduler.schedule(() -> {
            server.sendToAllTCP(new ReturnToLobbyPacket());

            // 3) –ï—â—ë —á–µ—Ä–µ–∑ 1 —Å–µ–∫ ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            scheduler.schedule(this::shutdownServer, 1, TimeUnit.SECONDS);

        }, 5, TimeUnit.SECONDS);
    }
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π sendWinner(!) –∏ –≤ core-–∫–æ–¥–µ –≤—ã–∑—ã–≤–∞–µ–º –∏–º–µ–Ω–Ω–æ sendWinnerAndShutdown(...)
    public void shutdownServer() {
        System.out.println("[SERVER] Shutting down...");
        BroadcastResponder.stopListening();


        // 1) –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
        scheduler.shutdownNow();
        try {
            scheduler.awaitTermination(2, TimeUnit.SECONDS);
        } catch (InterruptedException ignored) {}
        // 2) –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º KryoNet
        server.stop();
        server.close();
        instance = null;
    }
}
