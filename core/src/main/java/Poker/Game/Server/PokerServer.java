package Poker.Game.Server;

import Poker.Game.PacketsClasses.*;
import Poker.Game.core.Player;
import Poker.Game.core.PokerGame;
import Poker.Game.core.StartGame;
import com.badlogic.gdx.Gdx;
import com.esotericsoftware.kryonet.Connection;
import com.esotericsoftware.kryonet.Listener;
import com.esotericsoftware.kryonet.Server;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.*;

public class PokerServer {
    private final Map<Integer, Boolean> playerReadyStatus = new HashMap<>();
    private Server server;
    private StartGame startGame;

    // –•—Ä–∞–Ω–∏–º nickname –ø–æ connectionId
    private final Map<String,Integer> playerNicknames = new HashMap<>();

    // pendingActions: –∫–ª—é—á ‚Äî connectionId –∏–≥—Ä–æ–∫–∞, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –±—É–¥—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    private final Map<Integer, CompletableFuture<PlayerAction>> pendingActions = new ConcurrentHashMap<>();


    // –°–ª—É–∂–±–∞ –¥–ª—è —Ç–∞–π–º–∞—É—Ç–æ–≤ (Java 8)
    private final ScheduledExecutorService scheduler =
        Executors.newScheduledThreadPool(4);

    public void start() throws IOException {
        server = new Server();
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –ø–∞–∫–µ—Ç—ã (ActionRequest, ActionResponse, Action, Action[].class –∏ —Ç.–¥.)
        Network.register(server.getKryo());

        // –ó–∞–ø—É—Å–∫–∞–µ–º ¬´—Å–ª—É—à–∞–ª–∫—É¬ª –¥–ª—è –ª—é–±—ã—Ö UDP Broadcast, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        BroadcastResponder.startListening();

        // Listener –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: Join, GameStart –∏ –Ω–∞—à–∏ ActionResponse
        server.addListener(new Listener() {
            @Override
            public void connected(Connection conn) {
                Logger.server("connID=" + conn.getID() + " connected from " + conn.getRemoteAddressTCP());
            }


            @Override
            public void disconnected(Connection connection) {
                Gdx.app.log("Server", "Client disconnected (id=" + connection.getID() + ")");
                // –ü—Ä–æ–≤–µ—Ä–∏–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â—ë –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
                if (server.getConnections().size() == 0) {
                    Gdx.app.log("Server", "No more clients, stopping server‚Ä¶");
                    // –û—Å—Ç–∞–Ω–æ–≤–∏–º —Å–µ—Ä–≤–µ—Ä: –∑–∞–∫—Ä–æ–µ–º —Å–æ–∫–µ—Ç—ã –∏ –ø–æ—Ç–æ–∫–∏
                    server.stop();
                    // –ï—Å–ª–∏ —Ö–æ—Ç–∏–º ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Ü–µ–ª–∏–∫–æ–º
                    //System.exit(0);
                }
            }

            @Override
            public void received(Connection conn, Object obj) {
                Logger.server("‚ßó Received packet of type: " + obj.getClass().getName());


                if (obj instanceof JoinRequest) {
                    JoinRequest req = (JoinRequest) obj;
                    Logger.server("Player connected " + req.nickname);
                    playerNicknames.put(req.nickname,conn.getID());

                    Player player = new Player(req.nickname);
                    startGame.addPlayer(player.getName(), conn.getID());

                    server.sendToAllTCP(new PlayerJoinedNotification(req.nickname,conn.getID()));
                    server.sendToAllTCP(new PlayerListUpdate(playerNicknames));


                } else if (obj instanceof ActionResponse) {
                    ActionResponse resp = (ActionResponse) obj;
                    Logger.server("üì• [RESP] –æ—Ç playerId=" + resp.playerId +
                        " action=" + resp.chosenAction.name + ", amount=" + resp.amount);

                    CompletableFuture<PlayerAction> future = pendingActions.remove(resp.playerId);
                    if (future != null) {
                        PlayerAction action = new PlayerAction(resp.chosenAction.name, resp.amount);
                        future.complete(action);
                    } else {
                        Logger.server("‚Äº –ù–µ—Ç pendingActions –¥–ª—è " + resp.playerId);
                    }
                } else if (obj instanceof GameStartRequest) {
                    if (conn.getID() == 1 && startGame.getPlayers().size() >= 2) {
                        server.sendToAllTCP(new GameStartedNotification());
                        Logger.server("Game started by host");
                        new Thread(() -> {
                            try {
                                startGame.startGame(); // –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
                            } catch (Exception e) {
                                Gdx.app.error("Server", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã: " + e.getMessage(), e);
                                server.stop(); // –æ—Å—Ç–∞–Ω–æ–≤–∏–º —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
                                System.exit(1); // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–≤–µ—Ä—à–∏—Ç—å JVM
                            }
                        }).start();
                    } else {
                        Logger.server("–ù–µ–ª—å–∑—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É: –Ω–µ —Ö–æ—Å—Ç –∏–ª–∏ –º–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤");
                    }
                } else if (obj instanceof ChatMessage) {
                    ChatMessage mess = (ChatMessage) obj;
                    server.sendToAllTCP(mess);
                }else if (obj instanceof ClientReadyForNextRound) {
                    handleClientReadyForNextRound((ClientReadyForNextRound) obj);
                } else if (obj instanceof RestartGameRequest) {
                    RestartGameRequest req = (RestartGameRequest) obj;
                    if (req.senderId == 1) { // –¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç
                        Logger.server("‚Üª –ü–æ–ª—É—á–µ–Ω Restart –æ—Ç —Ö–æ—Å—Ç–∞!");

                        // 1. –û–±–Ω—É–ª–∏–º –≤—Å—ë
                        playerNicknames.clear();
                        pendingActions.clear();

                        // 2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º –ª–æ–≥–∏–∫—É StartGame
                        startGame = new StartGame();
                        startGame.setServer(PokerServer.this);

                        // 3. –í—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º: —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à—ë–ª —Ä–µ—Å—Ç–∞—Ä—Ç
                        server.sendToAllTCP(new ChatMessage("‚ôª –ò–≥—Ä–∞ –±—ã–ª–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ —Ö–æ—Å—Ç–æ–º", "sys"));
                        server.sendToAllTCP(new PlayerListUpdate(playerNicknames));
                        server.sendToAllTCP(new RestartGameNotification());
                    }
                }

            }
        });

        server.bind(54555, 54777);  // –≤—ã–±–∏—Ä–∞–π—Ç–µ –≤–∞—à–∏ –ø–æ—Ä—Ç—ã
        server.start();
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            Gdx.app.log("Server", "JVM shutdown hook: stopping server‚Ä¶");
            server.stop();
        }));


        // KeepAlive-–ø–∏–Ω–≥ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
        scheduler.scheduleAtFixedRate(() -> {
            for (Connection conn : server.getConnections()) {
                conn.sendTCP(new KeepAlive());
            }
            //Logger.server("KeepAlive –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º");
        }, 5, 5, TimeUnit.SECONDS);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–≥—Ä—ã
        startGame = new StartGame();
        startGame.setServer(this);

        Logger.server("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...");
    }

    /**
     * –ó–∞–ø—Ä–æ—Å —Ö–æ–¥–∞ —É –∫–ª–∏–µ–Ω—Ç–∞.
     * @param connectionId ID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (Connection.getID())
     * @param availableActions –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Action
     * @param timeoutSec —Ç–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     * @return Future, –∫–æ—Ç–æ—Ä–æ–µ –≤–µ—Ä–Ω—ë—Ç name –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
     */
    public CompletableFuture<PlayerAction> requestPlayerAction(int connectionId,
                                                               Action[] availableActions,
                                                               int timeoutSec) {
        CompletableFuture<PlayerAction> future = new CompletableFuture<>();
        pendingActions.put(connectionId, future);

        ActionRequest req = new ActionRequest();
        req.playerId = connectionId;
        req.availableActions = availableActions;
        req.timeoutSec = timeoutSec;
        server.sendToTCP(connectionId, req);

        Logger.server("‚ñ∫ ActionRequest sent to playerId=" + connectionId +
            ", actions=" + Arrays.toString(availableActions) +
            ", timeout=" + timeoutSec);

        // –¢–∞–π–º–∞—É—Ç ‚Üí auto-fold
        scheduler.schedule(() -> {
            if (!future.isDone()) {
                Logger.server("Timeout: auto-fold for " + connectionId);
                future.complete(new PlayerAction("fold", 0));
                pendingActions.remove(connectionId);
            }
        }, timeoutSec, TimeUnit.SECONDS);

        return future;
    }
    public void sendChatMessage(String text) {
        String name = "sys";
        server.sendToAllTCP(new ChatMessage(text, name));
    }

    public Server getServer() {
        return server;
    }

    public void setServer(Server server) {
        this.server = server;
    }
    private void handleClientReadyForNextRound(ClientReadyForNextRound packet) {
        int playerId = packet.getPlayerId();
        boolean isReady = packet.isReady();
        playerReadyStatus.put(playerId, isReady);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã
        if (areAllPlayersReady()) {
            startNextRound();
        }
    }
    private boolean areAllPlayersReady() {
        for (Boolean isReady : playerReadyStatus.values()) {
            if (!isReady) {
                return false;
            }
        }
        return true;
    }
    private void startNextRound() {
        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        System.out.println("–í—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥!");
        startGame.getGame().startNextRound();
    }
}
