package Poker.Game.Client;

import Poker.Game.ClientListener;
import Poker.Game.PacketsClasses.*;

import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryonet.Client;
import com.esotericsoftware.kryonet.Connection;
import com.esotericsoftware.kryonet.Listener;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * –ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∫–µ—Ä-—Ä—É–º–∞, ¬´—á–∏—Å—Ç—ã–π¬ª –æ—Ç –∫–æ–Ω—Å–æ–ª–∏, –æ—Ç–¥–∞—ë—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ ClientListener.
 */
public class PokerClient {
    private int clientId;
    private Client client;
    private ClientListener listener;
    private boolean host;
    private String name;
    private final Map<Integer, String> idToNickname   = new HashMap<>();
    private final Map<String, Integer> nicknameToId   = new HashMap<>();


    public void registerPlayer(int id, String nickname) {
        idToNickname.put(id, nickname);
        nicknameToId.put(nickname, id);
        // –µ—Å–ª–∏ —ç—Ç–æ –º—ã ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º clientId
        if (nickname.equals(this.name)) {
            this.clientId = id;
        }
    }

    public String getNicknameById(int id) {
        return idToNickname.get(id);
    }

    public int getIdByNickname(String name) {
        return nicknameToId.getOrDefault(name, -1);
    }


    /** –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π (UI, –ª–æ–≥–∏–∫–∞ –∏ —Ç.–ø.). */
    public void setListener(ClientListener listener) {
        this.listener = listener;
    }

    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å JoinRequest.
     *
     * @param hostIP   IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
     * @param nickname –ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞
     * @throws IOException –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
     */
    public void start(String hostIP, String nickname) throws IOException {
        client = new Client();
        client.start();

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤
        Kryo kryo = client.getKryo();
        Network.register(kryo);

        // –í–æ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–∞—Ö KryoNet ‚Äî –ª–æ–≤–∏–º uncaught exceptions
        Thread.setDefaultUncaughtExceptionHandler((thread, throwable) -> {
            System.err.println("üí• Uncaught exception in thread " + thread.getName());
            throwable.printStackTrace();
        });

        // –õ–∏—Å—Ç–µ–Ω–µ—Ä –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
        client.addListener(new Listener() {
            @Override
            public void received(Connection connection, Object object) {
                if (listener == null) return;

                if (object instanceof JoinResponse) {
                    listener.onJoinResponse((JoinResponse) object);

                }else if (object instanceof PlayerListUpdate) {
                    PlayerListUpdate update = (PlayerListUpdate) object;

                    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤: nickname ‚Üí id
                    for (Map.Entry<String, Integer> entry : update.getNicknames().entrySet()) {
                        String nickname = entry.getKey();
                        int playerId = entry.getValue();
                        registerPlayer(playerId, nickname);
                    }
                    listener.onPlayerListUpdate(update.getNicknamesOnly());
                }
                else if (object instanceof GameStartedNotification) {
                    listener.onGameStarted((GameStartedNotification) object);
                } else if (object instanceof CardInfo) {
                    listener.onCardInfo((CardInfo) object);
                } else if (object instanceof GameStats) {
                    listener.onGameStats((GameStats) object);
                } else if (object instanceof BlindsNotification) {
                    listener.onBlinds((BlindsNotification) object);
                } else if (object instanceof ActionRequest) {
                    listener.onActionRequest((ActionRequest) object);
                } else if (object instanceof PlayerBalanceUpdate) {
                    listener.onPlayerBalanceUpdate((PlayerBalanceUpdate) object);
                } else if (object instanceof TableCardsInfo) {
                    listener.onTableCardsInfo((TableCardsInfo) object);
                } else if (object instanceof PlayerBetUpdate) {
                    listener.onPlayerBetUpdate((PlayerBetUpdate) object);
                } else if (object instanceof ChatMessage) {
                    ChatMessage message = (ChatMessage) object;
                    listener.onChatMessage(message);
                } else if (object instanceof  PotUpdate) {
                    listener.onPotUpdate((PotUpdate) object);
                }else if (object instanceof FoldNotification) {
                    listener.onPlayerFold((FoldNotification) object);
                }else if(object instanceof EndOfHandPacket){
                    listener.onEndOfHandPacket((EndOfHandPacket) object);
                }
            }

            @Override
            public void disconnected(Connection connection) {
                if (listener != null) {
                    listener.onDisconnected();
                }
            }
        });

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É (—Ç–∞–π–º–∞—É—Ç 5000 ms, TCP 54555, UDP 54777)
        client.connect(5000, hostIP, 54555, 54777);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        this.name = nickname;
        client.sendTCP(new JoinRequest(nickname));

    }

    // === –ú–µ—Ç–æ–¥—ã –¥–ª—è UI / –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞, –≤—ã–∑—ã–≤–∞–µ–º—ã–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ ===

    public void sendCheck(int playerId) {
        ActionResponse resp = new ActionResponse();
        resp.playerId = playerId;
        resp.chosenAction = new Action("check", 0, 0, 0);
        client.sendTCP(resp);
    }

    public void sendFold(int playerId) {
        ActionResponse resp = new ActionResponse();
        resp.playerId = playerId;
        resp.chosenAction = new Action("fold", 0, 0, 0);
        client.sendTCP(resp);
    }

    public void sendCall(int playerId) {
        ActionResponse resp = new ActionResponse();
        resp.playerId = playerId;
        resp.chosenAction = new Action("call", 0, 0, 0);
        client.sendTCP(resp);
    }

    public void sendRaise(int playerId, float amount) {
        ActionResponse resp = new ActionResponse();
        resp.playerId = playerId;
        resp.chosenAction = new Action("raise", amount, 0, 0);
        resp.amount = amount;
        client.sendTCP(resp);
    }

    /** –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–∞—Ç—å —Ö–æ—Å—Ç—É UI-–∫–Ω–æ–ø–∫—É ¬´Start Game¬ª. */
    public void sendGameStart() {
        client.sendTCP(new GameStartRequest());
    }

    public void setHost(boolean host) {
        this.host = host;
    }

    public boolean isHost() {
        return host;
    }

    public String getNickName() {
        return name;
    }

    public void sendChatMessage(String text) {
        if (name == null) {
            System.err.println("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –∏–º—è –∏–≥—Ä–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ!");
            return;
        }
        client.sendTCP(new ChatMessage(text, name));
    }

    public int getMyId() {
        return clientId;
    }
}
